<?php
/**
 * @copyright 2014 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt GNU/GPL 2, see LICENSE.txt
 * @author Cliff Ingham <inghamn@bloomington.in.gov>
 *
 * This module is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This module is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
function ckan_text_filter_admin_form()
{
	return system_settings_form([
		'ckan_url'=>[
			'#type'          => 'textfield',
			'#default_value' => variable_get('ckan_url'),
			'#title'         => 'CKAN URL',
			'#description'   => 'The url for your CKAN website',
			'#required'      => true
		]
	]);
}

/**
 * Verifies the connection to CKAN
 *
 * @implements hook_admin_validate()
 */
function ckan_text_filter_admin_form_validate($form, &$form_state)
{
	// Make sure we can get back the media sizes
	$url = $form_state['values']['ckan_url'].'/api/3/action/package_list';
	$response = drupal_http_request($url);
	$data = json_decode($response->data);
	if (!count($data)) {
		form_set_error('ckan_url', 'Cannot connect to CKAN URL.  Make sure the URL is valid.');
	}
}

function ckan_text_filter_menu()
{
	return [
		'admin/config/services/ckan_text_filter' => [
			'title'           => 'CKAN settings',
			'description'     => 'Settings for the CKAN module',
			'page callback'   => 'drupal_get_form',
			'page arguments'  => ['ckan_text_filter_admin_form'],
			'access arguments'=> ['administer site configuration'],
			'type'            => MENU_NORMAL_ITEM
		]
	];
}

/**
 * @implements hook_filter_info()
 */
function ckan_text_filter_filter_info()
{
	return [
		'ckan_dataset_table' => [
			'title'           => 'CKAN dataset table syntax',
			'description'     => 'Embeds a CKAN dataset as an HTML table',
			'process callback'=> '_ckan_dataset_table'
		]
	];
}

/**
 * Replaces ckan dataset syntax with an HTML table
 *
 * Users specify the CKAN dataset they want to embed as:
 * {ckan_table:$resource_id}
 * Example: {ckan_table:a38d25a4-7a50-4984-9ac9-60c49858a3a3}
 *
 * @returns string
 */
function _ckan_dataset_table($text, $filter, $format, $langcode, $cache, $cache_id)
{
	$syntax = '/{ckan_table:([0-9a-f\-]+)}/';
	$url = variable_get('ckan_url');

	if (preg_match($syntax, $text, $matches)) {
		$resource_id = $matches[1];

		$url.= '/api/action/datastore_search?resource_id='.$resource_id;
		$response = drupal_http_request($url);
		$data = json_decode($response->data);

		if (count($data) && $data->success) {
			$html = '<table>';
			// Parse all the fieldnames
			$fields = [];
			foreach ($data->result->fields as $f) {
				if ($f->id != '_id') { $fields[] = $f->id; }
			}
			// Render the fieldnames as table headers
			$html.= '<thead><tr>';
			foreach ($fields as $f) {
				$f = check_plain($f);
				$html.= "<th>$f</th>";
			}
			$html.= '</tr></thead>';

			// Render each of the rows as table cells
			$html.= '<tbody>';
			foreach ($data->result->records as $row) {
				$html.= '<tr>';
				foreach ($fields as $field) {
					$value = check_plain($row->$field);
					$html.= "<td>$value</td>";
				}
				$html.= '</tr>';

			}
			$html.= '</tbody></table>';

			return preg_replace($syntax, $html, $text);
		}
	}
}
